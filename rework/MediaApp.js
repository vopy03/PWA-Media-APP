/**
 * MediaApp - –≥–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É
 * –û–±'—î–¥–Ω—É—î –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ –∫–µ—Ä—É—î –∑–∞–≥–∞–ª—å–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
 */
class MediaApp {
  constructor() {
    this.fileSystemManager = new FileSystemManager();
    this.profileManager = new ProfileManager();
    this.mediaAnalyzer = new MediaAnalyzer();
    this.uiManager = new UIManager(document.getElementById('app-container'));
    this.cacheManager = new CacheManager();
    
    this.mediaData = { movies: [], series: [] };
    this.currentState = 'initializing';
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    this.uiManager.setItemClickHandler((action, data) => this.handleItemClick(action, data));
    this.uiManager.setProfileSelectHandler((profileName, createNew = false) => {
      if (createNew) {
        this.createProfile(profileName);
      } else {
        this.selectProfile(profileName);
      }
    });
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
   */
  async initialize() {
    console.log('[MediaApp] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É...');
    
    try {
      this.currentState = 'initializing';
      this.uiManager.showLoading('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...');
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ CacheManager
      await this.cacheManager.initialize();
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
      const profileInitialized = await this.profileManager.initialize();
      if (!profileInitialized) {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ–≤');
      }
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
      const fsInitialized = await this.fileSystemManager.initialize();
      
      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∑–≤–æ–ª—ñ–≤
      this.fileSystemManager.onPermissionChange = (permission) => {
        this.handlePermissionChange(permission);
      };
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–∑–≤–æ–ª–∏ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
      if (fsInitialized && this.fileSystemManager.rootHandle) {
        const permission = await this.fileSystemManager.rootHandle.queryPermission({ mode: 'read' });
        console.log('[MediaApp] –ü–æ—Ç–æ—á–Ω–∏–π –¥–æ–∑–≤—ñ–ª –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', permission);
        
        if (permission === 'prompt' && this.isMobileDevice()) {
          // –ù–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
          this.handlePermissionChange(permission);
          return; // –ó—É–ø–∏–Ω—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
        }
      }
      
      // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
      if (!fsInitialized) {
        this.currentState = 'no-directory';
        this.showDirectorySelector();
      } else if (!this.profileManager.getCurrentProfile()) {
        this.currentState = 'no-profile';
        this.showProfileSelector();
      } else {
        this.currentState = 'ready';
        await this.loadCurrentProfile();
        await this.loadMediaData();
        this.showMediaCatalog();
      }
      
      console.log('[MediaApp] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
      this.uiManager.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó', error.message);
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è callback'—ñ–≤
   */
  setupCallbacks() {
    // UI callbacks
    this.uiManager.setItemClickHandler((type, path) => {
      this.handleItemClick(type, path);
    });
    
    this.uiManager.setProfileSelectHandler((profileName, createNew = false) => {
      this.handleProfileSelect(profileName, createNew);
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –¥–æ–∑–≤–æ–ª—ñ–≤
   */
  handlePermissionChange(permission) {
    console.log('[MediaApp] –ó–º—ñ–Ω–∞ –¥–æ–∑–≤–æ–ª—ñ–≤:', permission);
    
    if (permission === 'denied') {
      this.currentState = 'no-permission';
      this.uiManager.showError(
        '–î–æ—Å—Ç—É–ø –¥–æ –ø–∞–ø–∫–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ',
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑–Ω–æ–≤—É —Ç–∞ –Ω–∞–¥–∞–π—Ç–µ –¥–æ–∑–≤—ñ–ª –Ω–∞ –¥–æ—Å—Ç—É–ø.'
      );
    } else if (permission === 'prompt') {
      // –ù–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
      if (this.isMobileDevice()) {
        this.uiManager.showError(
          '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ—Å—Ç—É–ø',
          '–ù–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö –¥–æ–∑–≤–æ–ª–∏ –º–æ–∂—É—Ç—å —Å–∫–∏–¥–∞—Ç–∏—Å—è –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–æ—Å—Ç—É–ø" —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ–∑–≤—ñ–ª –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –ø–∞–ø–∫–∏.',
          'retry-mobile-permission'
        );
      } else {
        console.log('[MediaApp] –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø–∞–ø–∫–∏');
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
   */
  isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø–∞–ø–∫–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö
   */
  async showDirectorySelector() {
    console.log('[MediaApp] –ü–æ–∫–∞–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø–∞–ø–∫–∏');
    
    let warningMessage = '';
    if (this.isMobileDevice()) {
      warningMessage = `
        <div class="mobile-warning">
          <h3>üì± –£–≤–∞–≥–∞ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤</h3>
          <p>–ù–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö –¥–æ–∑–≤–æ–ª–∏ –º–æ–∂—É—Ç—å —Å–∫–∏–¥–∞—Ç–∏—Å—è –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞. –î–ª—è –∫—Ä–∞—â–æ—ó —Ä–æ–±–æ—Ç–∏:</p>
          <ul>
            <li>–î–æ–¥–∞–π—Ç–µ —Å–∞–π—Ç –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É</li>
            <li>–Ø–∫—â–æ –¥–æ—Å—Ç—É–ø –∑–Ω–∏–∫–Ω–µ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–æ—Å—Ç—É–ø"</li>
            <li>–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø–∞–º'—è—Ç–∞—î –≤–∞—à –≤–∏–±—ñ—Ä –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø—É—Å–∫—ñ–≤</li>
          </ul>
        </div>
      `;
    }
    
    this.container.innerHTML = `
      <div class="directory-selector">
        <h2 class="selector-title">–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ –º–µ–¥—ñ–∞</h2>
        <p class="selector-description">
          –í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –≤–∞—à—ñ —Ñ—ñ–ª—å–º–∏ —Ç–∞ —Å–µ—Ä—ñ–∞–ª–∏.
          –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø–∞–º'—è—Ç–∞—î –≤–∞—à –≤–∏–±—ñ—Ä –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø—É—Å–∫—ñ–≤.
        </p>
        ${warningMessage}
        <button id="choose-directory-btn" class="choose-directory-btn">
          –í–∏–±—Ä–∞—Ç–∏ –ø–∞–ø–∫—É
        </button>
      </div>
    `;
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó
    const chooseBtn = this.container.querySelector('#choose-directory-btn');
    chooseBtn.addEventListener('click', async () => {
      await this.chooseDirectory();
    });
  }

  /**
   * –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏
   */
  async chooseDirectory() {
    try {
      this.uiManager.showLoading('–í–∏–±—ñ—Ä –ø–∞–ø–∫–∏...');
      
      const handle = await this.fileSystemManager.chooseRootDirectory();
      
      // –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
      this.currentState = 'no-profile';
      this.showProfileSelector();
      
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏:', error);
      
      if (error.name === 'AbortError') {
        this.showDirectorySelector(); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
      } else {
        this.uiManager.showError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏', error.message);
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
   */
  async showProfileSelector() {
    console.log('[MediaApp] –ü–æ–∫–∞–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤');
    
    try {
      const profiles = await this.profileManager.getAllProfiles();
      const currentProfile = this.profileManager.getCurrentProfile();
      
      this.uiManager.renderProfileSelector(profiles, currentProfile);
      
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤:', error);
      this.uiManager.showError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤', error.message);
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ñ—ñ–ª—é
   */
  async handleProfileSelect(profileName, createNew = false) {
    console.log(`[MediaApp] –í–∏–±—Ä–∞–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å: ${profileName} (–Ω–æ–≤–∏–π: ${createNew})`);
    
    try {
      let profile;
      
      if (createNew) {
        profile = await this.profileManager.createProfile(profileName);
      } else {
        await this.profileManager.setCurrentProfile(profileName);
        profile = this.profileManager.getCurrentProfile();
      }
      
      this.currentProfile = profile;
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–¥—ñ–∞ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ç–∞–ª–æ–≥
      this.currentState = 'ready';
      await this.loadMediaData();
      this.showMediaCatalog();
      
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ñ—ñ–ª—é:', error);
      this.uiManager.showError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ñ—ñ–ª—é', error.message);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
   */
  async loadCurrentProfile() {
    this.currentProfile = this.profileManager.getCurrentProfile();
    if (!this.currentProfile) {
      throw new Error('–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
    
    console.log(`[MediaApp] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å: ${this.currentProfile.name}`);
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–∞–Ω–∏—Ö
   */
  async loadMediaData() {
    console.log('[MediaApp] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–∞–Ω–∏—Ö...');
    try {
      if (this.cacheManager.isCacheValid()) {
        console.log('[MediaApp] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ');
        this.mediaData = this.cacheManager.getCachedData();
        this.showMediaCatalog(); // –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ç–∞–ª–æ–≥ –∑ –∫–µ—à–µ–º
        
        // –ó–∞–≤–∂–¥–∏ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è FileSystemHandle
        this.updateMediaDataInBackground();
        return;
      }
      
      if (this.cacheManager.getCachedData() && !this.cacheManager.isUpdating()) {
        console.log('[MediaApp] –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–µ—à, –æ–Ω–æ–≤–ª—é—î–º–æ –Ω–∞ —Ñ–æ–Ω—ñ');
        this.mediaData = this.cacheManager.getCachedData();
        this.showMediaCatalog(); // –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ç–∞–ª–æ–≥ –∑ –∫–µ—à–µ–º
        this.updateMediaDataInBackground();
        return;
      }
      
      this.uiManager.showLoading('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞...');
      await this.loadMediaDataFromSource();
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞:', error);
      throw error;
    }
  }



  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–∞–Ω–∏—Ö –∑ –¥–∂–µ—Ä–µ–ª–∞
   */
  async loadMediaDataFromSource() {
    console.log('[MediaApp] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–∞–Ω–∏—Ö –∑ –¥–∂–µ—Ä–µ–ª–∞...');
    try {
      const data = await this.mediaAnalyzer.analyzeDirectoryStructure(this.fileSystemManager.rootHandle);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
      data.movies = await this.loadMoviesWithProgress(data.movies);
      data.series = await this.loadSeriesWithProgress(data.series);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–µ
      data.lastWatched = await this.profileManager.getLastWatched();
      
      this.mediaData = data;
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      this.cacheManager.setCachedData(data);
      
      console.log(`[MediaApp] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${data.movies.length} —Ñ—ñ–ª—å–º—ñ–≤, ${data.series.length} —Å–µ—Ä—ñ–∞–ª—ñ–≤`);
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –¥–∂–µ—Ä–µ–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–∞–Ω–∏—Ö –Ω–∞ —Ñ–æ–Ω—ñ
   */
  async updateMediaDataInBackground() {
    console.log('[MediaApp] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–∞–Ω–∏—Ö –Ω–∞ —Ñ–æ–Ω—ñ...');
    this.cacheManager.setUpdatingStatus(true);
    
    try {
      const data = await this.mediaAnalyzer.analyzeDirectoryStructure(this.fileSystemManager.rootHandle);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
      data.movies = await this.loadMoviesWithProgress(data.movies);
      data.series = await this.loadSeriesWithProgress(data.series);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–µ
      data.lastWatched = await this.profileManager.getLastWatched();
      
      // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
      const hasChanges = this.hasDataChanges(data);
      
      if (hasChanges) {
        console.log('[MediaApp] –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ –¥–∞–Ω–∏—Ö, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–∞–ª–æ–≥');
        this.mediaData = data;
        this.cacheManager.setCachedData(data); // –û–Ω–æ–≤–ª—é—î–º–æ timestamp
        
        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        this.showMediaCatalog();
      } else {
        console.log('[MediaApp] –ó–º—ñ–Ω –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ –±–µ–∑ –∑–º—ñ–Ω–∏ timestamp');
        this.cacheManager.updateDataWithoutTimestamp(data); // –ù–µ –æ–Ω–æ–≤–ª—é—î–º–æ timestamp
      }
      
      console.log('[MediaApp] –§–æ–Ω–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
    } finally {
      this.cacheManager.setUpdatingStatus(false);
      // –û–Ω–æ–≤–ª—é—î–º–æ UI —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      this.showMediaCatalog();
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–º—ñ–Ω–∏ –≤ –¥–∞–Ω–∏—Ö
   */
  hasDataChanges(newData) {
    if (!this.mediaData) return true;
    
    // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å–º—ñ–≤
    if (this.mediaData.movies.length !== newData.movies.length) {
      console.log('[MediaApp] –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ—ñ–ª—å–º—ñ–≤:', this.mediaData.movies.length, '‚Üí', newData.movies.length);
      return true;
    }
    
    // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–∞–ª—ñ–≤
    if (this.mediaData.series.length !== newData.series.length) {
      console.log('[MediaApp] –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–µ—Ä—ñ–∞–ª—ñ–≤:', this.mediaData.series.length, '‚Üí', newData.series.length);
      return true;
    }
    
    // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –Ω–∞–∑–≤–∏ —Ñ—ñ–ª—å–º—ñ–≤
    const oldMovieNames = this.mediaData.movies.map(m => m.name).sort();
    const newMovieNames = newData.movies.map(m => m.name).sort();
    if (JSON.stringify(oldMovieNames) !== JSON.stringify(newMovieNames)) {
      console.log('[MediaApp] –ó–º—ñ–Ω–∞ –≤ —Ñ—ñ–ª—å–º–∞—Ö');
      return true;
    }
    
    // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –Ω–∞–∑–≤–∏ —Å–µ—Ä—ñ–∞–ª—ñ–≤
    const oldSeriesNames = this.mediaData.series.map(s => s.title).sort();
    const newSeriesNames = newData.series.map(s => s.title).sort();
    if (JSON.stringify(oldSeriesNames) !== JSON.stringify(newSeriesNames)) {
      console.log('[MediaApp] –ó–º—ñ–Ω–∞ –≤ —Å–µ—Ä—ñ–∞–ª–∞—Ö');
      return true;
    }
    
    return false;
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤ –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
   */
  async loadMoviesWithProgress(movies) {
    const moviesWithProgress = [];
    
    for (const movie of movies) {
      const progress = await this.profileManager.getWatchProgress(`${movie.path}/${movie.name}`);
      moviesWithProgress.push({
        ...movie,
        progress: progress
      });
    }
    
    return moviesWithProgress;
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—ñ–≤ –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
   */
  async loadSeriesWithProgress(series) {
    const seriesWithProgress = [];
    
    for (const seriesItem of series) {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ø—ñ–∑–æ–¥—É
      for (const season of seriesItem.seasons) {
        for (const episode of season.episodes) {
          const progress = await this.profileManager.getWatchProgress(`${episode.path}/${episode.name}`);
          episode.progress = progress;
        }
      }
      
      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å —Å–µ—Ä—ñ–∞–ª—É
      const totalEpisodes = seriesItem.totalEpisodes;
      const watchedEpisodes = seriesItem.seasons.reduce((sum, season) => {
        return sum + season.episodes.filter(ep => ep.progress && ep.progress.completed).length;
      }, 0);
      
      seriesItem.progress = {
        watched: watchedEpisodes,
        total: totalEpisodes,
        percentage: totalEpisodes > 0 ? Math.round((watchedEpisodes / totalEpisodes) * 100) : 0
      };
      
      seriesWithProgress.push(seriesItem);
    }
    
    return seriesWithProgress;
  }

  /**
   * –ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥—É –º–µ–¥—ñ–∞
   */
  showMediaCatalog() {
    console.log('[MediaApp] –ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥—É –º–µ–¥—ñ–∞');
    console.log('[MediaApp] lastWatched:', this.mediaData.lastWatched);
    this.currentState = 'ready';
    this.uiManager.renderMediaCatalog(
      this.mediaData.movies || [], 
      this.mediaData.series || [], 
      this.mediaData.lastWatched,
      this.cacheManager.isUpdating()
    );
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –ø–æ –µ–ª–µ–º–µ–Ω—Ç–∞–º
   */
  handleItemClick(action, data = null) {
    console.log('[MediaApp] –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É:', action, data);
    
    switch (action) {
      case 'retry-access':
        this.retryAccess();
        break;
      case 'retry-mobile-permission':
        this.retryMobilePermission();
        break;
      case 'choose-new-directory':
        this.showDirectorySelector();
        break;
      case 'refresh-cache':
        this.refreshCache();
        break;
      case 'show-series':
        this.showSeries(data.path);
        break;
      case 'series':
        this.showSeries(data);
        break;
      case 'play-video':
        this.playVideo(data);
        break;
      case 'movie':
        this.playMovie(data);
        break;
      case 'episode':
        this.playEpisode(data);
        break;
      case 'resume':
        this.resumeLastWatched(data);
        break;
      case 'back':
        this.goBack();
        break;
      case 'select-profile':
        this.selectProfile(data);
        break;
      case 'create-profile':
        this.createProfile(data);
        break;
      case 'clear-history':
        this.clearHistory();
        break;
      case 'back-to-catalog':
        this.showMediaCatalog();
        break;
      default:
        console.warn('[MediaApp] –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è:', action);
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
   */
  async refreshCache() {
    console.log('[MediaApp] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É...');
    this.cacheManager.clearCache();
    this.uiManager.showLoading('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É...');
    
    try {
      await this.loadMediaDataFromSource();
      this.showMediaCatalog();
      console.log('[MediaApp] –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É:', error);
      this.uiManager.showError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è', error.message);
    }
  }

  /**
   * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
   */
  async retryMobilePermission() {
    console.log('[MediaApp] –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –Ω–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É...');
    
    try {
      this.uiManager.showLoading('–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É...');
      
      // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π handle
      const handle = await this.fileSystemManager.loadDirectoryHandle();
      
      if (handle) {
        // –ó–∞–ø–∏—Ç—É—î–º–æ –¥–æ–∑–≤—ñ–ª —á–µ—Ä–µ–∑ –≤–∑–∞—î–º–æ–¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        console.log('[MediaApp] –ó–∞–ø–∏—Ç—É—î–º–æ –¥–æ–∑–≤—ñ–ª —á–µ—Ä–µ–∑ –≤–∑–∞—î–º–æ–¥—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
        const permission = await handle.requestPermission({ mode: 'read' });
        
        if (permission === 'granted') {
          console.log('[MediaApp] –î–æ–∑–≤—ñ–ª –Ω–∞–¥–∞–Ω–æ! –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å—Ç—É–ø...');
          this.fileSystemManager.rootHandle = handle;
          await this.loadMediaData();
          this.showMediaCatalog();
          return;
        } else {
          console.log('[MediaApp] –î–æ–∑–≤—ñ–ª –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ:', permission);
        }
      }
      
      // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏, –ø–æ–∫–∞–∑—É—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä
      console.log('[MediaApp] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–æ—Å—Ç—É–ø, –ø–æ–∫–∞–∑—É—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä...');
      this.showDirectorySelector();
      
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É:', error);
      this.showDirectorySelector();
    }
  }

  /**
   * –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
   */
  async retryAccess() {
    console.log('[MediaApp] –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É...');
    
    try {
      this.uiManager.showLoading('–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É...');
      
      // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ handle –∑–Ω–æ–≤—É
      const initialized = await this.fileSystemManager.initialize();
      
      if (initialized) {
        // –Ø–∫—â–æ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–æ—Å—Ç—É–ø, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
        await this.loadMediaData();
        this.showMediaCatalog();
      } else {
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –ø–æ–∫–∞–∑—É—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–∞–ø–∫–∏
        this.showDirectorySelector();
      }
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É:', error);
      this.showDirectorySelector();
    }
  }

  /**
   * –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ (–∑–∞–≥–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥)
   */
  async playVideo(data) {
    console.log('[MediaApp] –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', data);
    
    if (!data || !data.type || !data.path) {
      console.error('[MediaApp] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:', data);
      return;
    }
    
    try {
      switch (data.type) {
        case 'movie':
          await this.playMovie(data.path);
          break;
        case 'series':
          await this.showSeries(data.path);
          break;
        case 'episode':
          await this.playEpisode(data.path);
          break;
        default:
          console.warn('[MediaApp] –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –≤—ñ–¥–µ–æ:', data.type);
      }
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', error);
      this.uiManager.showError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è', error.message);
    }
  }

  /**
   * –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É
   */
  async playMovie(path) {
    console.log(`[MediaApp] –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É: ${path}`);
    console.log('[MediaApp] –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—ñ–ª—å–º–∏:', this.mediaData.movies.map(m => ({
      title: m.title,
      path: m.path,
      name: m.name,
      fullPath: `${m.path}/${m.name}`
    })));
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ—ñ–ª—å–º
    const movie = this.mediaData.movies.find(m => `${m.path}/${m.name}` === path);
    if (!movie) {
      console.error('[MediaApp] –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –®—É–∫–∞—î–º–æ:', path);
      console.error('[MediaApp] –î–æ—Å—Ç—É–ø–Ω—ñ —à–ª—è—Ö–∏:', this.mediaData.movies.map(m => `${m.path}/${m.name}`));
      throw new Error('–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–ª–µ—î—Ä
    this.uiManager.renderVideoPlayer({
      title: movie.title,
      path: path,
      currentTime: movie.progress ? movie.progress.position : 0
    });
    
    // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
    this.setupVideoPlayer(movie.handle);
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–µ—Ä—ñ–∞–ª—É
   */
  async showSeries(path) {
    console.log(`[MediaApp] –ü–æ–∫–∞–∑ —Å–µ—Ä—ñ–∞–ª—É: ${path}`);
    console.log('[MediaApp] –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ–∞–ª–∏:', this.mediaData.series.map(s => ({
      title: s.title,
      path: s.path,
      originalName: s.originalName,
      fullPath: `${s.path}/${s.originalName}`
    })));
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–µ—Ä—ñ–∞–ª
    const series = this.mediaData.series.find(s => `${s.path}/${s.originalName}` === path);
    if (!series) {
      console.error('[MediaApp] –°–µ—Ä—ñ–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –®—É–∫–∞—î–º–æ:', path);
      console.error('[MediaApp] –î–æ—Å—Ç—É–ø–Ω—ñ —à–ª—è—Ö–∏:', this.mediaData.series.map(s => `${s.path}/${s.originalName}`));
      throw new Error('–°–µ—Ä—ñ–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å–µ—Ä—ñ–∞–ª—É
    this.uiManager.renderSeriesPage(series);
  }

  /**
   * –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ø—ñ–∑–æ–¥—É
   */
  async playEpisode(path) {
    console.log(`[MediaApp] –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ø—ñ–∑–æ–¥—É: ${path}`);
    console.log('[MediaApp] –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –ø–æ—à—É–∫—É –µ–ø—ñ–∑–æ–¥—É:', this.mediaData.series.map(s => ({
      title: s.title,
      seasons: s.seasons.map(season => ({
        name: season.name,
        episodes: season.episodes.map(ep => ({
          name: ep.name,
          path: ep.path,
          fullPath: `${ep.path}/${ep.name}`
        }))
      }))
    })));
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ø—ñ–∑–æ–¥ –≤ —Å–µ—Ä—ñ–∞–ª–∞—Ö
    let episode = null;
    for (const series of this.mediaData.series) {
      for (const season of series.seasons) {
        episode = season.episodes.find(ep => `${ep.path}/${ep.name}` === path);
        if (episode) break;
      }
      if (episode) break;
    }
    
    if (!episode) {
      console.error('[MediaApp] –ï–ø—ñ–∑–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –®—É–∫–∞—î–º–æ:', path);
      console.error('[MediaApp] –î–æ—Å—Ç—É–ø–Ω—ñ –µ–ø—ñ–∑–æ–¥–∏:', this.mediaData.series.flatMap(s => 
        s.seasons.flatMap(season => 
          season.episodes.map(ep => `${ep.path}/${ep.name}`)
        )
      ));
      throw new Error('–ï–ø—ñ–∑–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–ª–µ—î—Ä
    this.uiManager.renderVideoPlayer({
      title: `${episode.episodeLabel} - ${episode.title || '–ï–ø—ñ–∑–æ–¥'}`,
      path: path,
      currentTime: episode.progress ? episode.progress.position : 0
    });
    
    // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
    this.setupVideoPlayer(episode.handle);
  }

  /**
   * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ
   */
  async resumeLastWatched(path) {
    console.log(`[MediaApp] –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è: ${path}`);
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ —à–ª—è—Ö–æ–º
    const movie = this.mediaData.movies.find(m => `${m.path}/${m.name}` === path);
    if (movie) {
      await this.playMovie(path);
      return;
    }
    
    // –®—É–∫–∞—î–º–æ –≤ —Å–µ—Ä—ñ–∞–ª–∞—Ö
    for (const series of this.mediaData.series) {
      for (const season of series.seasons) {
        const episode = season.episodes.find(ep => `${ep.path}/${ep.name}` === path);
        if (episode) {
          await this.playEpisode(path);
          return;
        }
      }
    }
    
    throw new Error('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  }

  /**
   * –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥
   */
  goBack() {
    console.log('[MediaApp] –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥');
    console.log('[MediaApp] –ü–æ—Ç–æ—á–Ω–∏–π view:', this.uiManager.currentView);
    
    if (this.uiManager.currentView === 'video-player' || 
        this.uiManager.currentView === 'series-page') {
      this.showMediaCatalog();
    } else if (this.uiManager.currentView === 'catalog') {
      this.showProfileSelector();
    } else {
      // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É
      this.showMediaCatalog();
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –ø–ª–µ—î—Ä–∞
   */
  async setupVideoPlayer(fileHandle) {
    try {
      const file = await this.fileSystemManager.getFile(fileHandle);
      const videoElement = this.uiManager.container.querySelector('#video-element');
      
      if (videoElement) {
        const url = URL.createObjectURL(file);
        videoElement.src = url;
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –ø–ª–µ—î—Ä–∞ –∑ throttling
        let lastSaveTime = 0;
        const saveInterval = 5000; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
        
        videoElement.addEventListener('timeupdate', () => {
          const now = Date.now();
          if (now - lastSaveTime >= saveInterval) {
            this.savePlaybackProgress(fileHandle, videoElement.currentTime, videoElement.duration);
            lastSaveTime = now;
          }
        });
        
        videoElement.addEventListener('ended', () => {
          this.markAsCompleted(fileHandle);
        });
        
        // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
        const fullPath = this.getFullPath(fileHandle);
        const progress = await this.profileManager.getWatchProgress(fullPath);
        if (progress && progress.position > 0) {
          videoElement.currentTime = progress.position;
        }
      }
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–µ—î—Ä–∞:', error);
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É –¥–æ —Ñ–∞–π–ª—É
   */
  getFullPath(fileHandle) {
    // –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª –≤ –Ω–∞—à–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —à–ª—è—Ö—É
    const fileName = fileHandle.name;
    
    // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ —Ñ—ñ–ª—å–º–∞—Ö
    const movie = this.mediaData.movies.find(m => m.name === fileName);
    if (movie) {
      return `${movie.path}/${movie.name}`;
    }
    
    // –ü–æ—Ç—ñ–º —à—É–∫–∞—î–º–æ –≤ —Å–µ—Ä—ñ–∞–ª–∞—Ö
    for (const series of this.mediaData.series) {
      for (const season of series.seasons) {
        const episode = season.episodes.find(ep => ep.name === fileName);
        if (episode) {
          return `${episode.path}/${episode.name}`;
        }
      }
    }
    
    // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É —è–∫ fallback
    console.warn(`[MediaApp] –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–ª—è —Ñ–∞–π–ª—É "${fileName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    return fileName;
  }

  /**
   * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –≤—ñ–¥–µ–æ
   */
  getVideoType(fileHandle) {
    const fileName = fileHandle.name;
    
    // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ —Ñ—ñ–ª—å–º–∞—Ö
    const movie = this.mediaData.movies.find(m => m.name === fileName);
    if (movie) {
      return 'movie';
    }
    
    // –ü–æ—Ç—ñ–º —à—É–∫–∞—î–º–æ –≤ —Å–µ—Ä—ñ–∞–ª–∞—Ö
    for (const series of this.mediaData.series) {
      for (const season of series.seasons) {
        const episode = season.episodes.find(ep => ep.name === fileName);
        if (episode) {
          return 'episode';
        }
      }
    }
    
    // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é —Ñ–∞–π–ª—É
    if (this.hasEpisodePattern(fileName)) {
      return 'episode';
    }
    
    return 'movie'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –ø–∞—Ç—Ç–µ—Ä–Ω –µ–ø—ñ–∑–æ–¥—É –≤ –Ω–∞–∑–≤—ñ —Ñ–∞–π–ª—É
   */
  hasEpisodePattern(fileName) {
    const episodePatterns = [
      /s\d{1,2}e\d{1,2}/i,
      /season\s*\d+\s*episode\s*\d+/i,
      /—Å–µ–∑–æ–Ω\s*\d+\s*—Å–µ—Ä–∏—è\s*\d+/i,
      /episode\s*\d+/i,
      /—Å–µ—Ä–∏—è\s*\d+/i
    ];
    
    return episodePatterns.some(pattern => pattern.test(fileName));
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
   */
  async savePlaybackProgress(fileHandle, currentTime, duration) {
    if (!this.currentProfile) return;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
    if (!currentTime || isNaN(currentTime) || !duration || isNaN(duration) || duration <= 0) {
      console.log('[MediaApp] –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è - –Ω–µ–ø–æ–≤–Ω—ñ –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:', { currentTime, duration });
      return;
    }
    
    try {
      const fullPath = this.getFullPath(fileHandle);
      const videoType = this.getVideoType(fileHandle);
      
      console.log(`[MediaApp] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è: ${fullPath} (—Ç–∏–ø: ${videoType})`);
      
      await this.profileManager.addToHistory(
        fullPath,
        currentTime,
        duration,
        videoType
      );
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É:', error);
    }
  }

  /**
   * –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
   */
  async markAsCompleted(fileHandle) {
    if (!this.currentProfile) return;
    
    try {
      const fullPath = this.getFullPath(fileHandle);
      const progress = await this.profileManager.getWatchProgress(fullPath);
      if (progress) {
        progress.completed = true;
        // TODO: –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å –≤ –±–∞–∑—ñ
      }
    } catch (error) {
      console.error('[MediaApp] –ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', error);
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
   */
  destroy() {
    console.log('[MediaApp] –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤...');
    
    this.fileSystemManager.destroy();
    this.uiManager.clear();
    
    // –û—á–∏—â–µ–Ω–Ω—è URL –æ–±'—î–∫—Ç—ñ–≤
    const videoElement = this.container.querySelector('#video-element');
    if (videoElement && videoElement.src) {
      URL.revokeObjectURL(videoElement.src);
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫ –º–æ–¥—É–ª—å
export { MediaApp }; 